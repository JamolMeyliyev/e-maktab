using AutoMapper;
using e_maktab.BizLogicLayer.Service;
using e_maktab.DataLayer;
using e_maktab.DataLayer.AutoGenerated;
using e_maktab.DataLayer.Repositories;
using StatusGeneric;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using WEBASE.Models;

namespace e_maktab.BizLogicLayer.Services;

public class UserService : StatusGenericHandler, IUserService
{
    private readonly IMapper _mapper;
    private readonly IUserRepository _repos;
    private readonly IUnitOfWork _unitOfWork;
    private readonly IRoleService _roleService;
    private readonly IUserRoleRepository _userRoleRepos;

    public UserService(
        IMapper mapper,
        IUserRepository repos, 
        IUnitOfWork unitOfWork,
        IRoleService roleService, 
        IUserRoleRepository userRoleRepos)
    {
        _mapper = mapper;
        _repos = repos;
        _unitOfWork = unitOfWork;
        _roleService = roleService;
        _userRoleRepos = userRoleRepos;
    }

    public SelectList<int> AsSelectList()
    {
        throw new NotImplementedException();
    }

    public async Task<HaveId<int>> Create(CreateUserDto dto)
    {
        var entity = _mapper.Map<User>(dto);
        using (var transaction = _unitOfWork.BeginTransaction())
        {
            try
            {

                var user = await _repos.InsertAsync(entity);
                if (dto.Roles is not null && dto.Roles.Count > 0)
                {
                    foreach (var roleId in dto.Roles)
                    {
                        var roleEntity = new UserRole()
                        {
                            RoleId = roleId,
                            UserId = user.Id,
                            StateId = 1,
                            DateOfCreated = DateTime.UtcNow,
                        };
                        await _userRoleRepos.InsertAsync(roleEntity);

                    }
                }
                await transaction.CommitAsync();
                return HaveId.Create(user.Id);

            }
            catch (Exception ex)
            {
                transaction.Rollback();
                throw new Exception();
            }
        }

    }

    public void Delete(int id)
    {
        throw new NotImplementedException();
    }

    public UserDto Get(int id)
    {
        throw new NotImplementedException();
    }

    public PagedResult<UserListDto> GetList(UserListSortFilterOptions dto)
    {
        throw new NotImplementedException();
    }

    public void Update(UpdateUserDto dto)
    {
        throw new NotImplementedException();
    }
}
